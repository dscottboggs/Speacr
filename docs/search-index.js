crystal_doc_search_index_callback({"repository_name":"","body":"# Speacr\n#### Bindings to libespeak (eSpeak) for Crystal\n\nThe bindings are complete and documented, but use fails currently for me when it\nfails to find an audio device.\n\n\n## Installation\n1. Add the dependency to your `shard.yml`:\n```yaml\ndependencies:\n  espeak.cr:\n    github: your-github-user/espeak.cr\n```\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"Speacr\"\nSpeacr::Speaker.new.say \"something\"\n```\n\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/espeak.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [D. Scott Boggs](https://github.com/your-github-user) - creator and maintainer\n","program":{"html_id":"/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"/Speacr","path":"Speacr.html","kind":"module","full_name":"Speacr","name":"Speacr","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"/Speacr/Speaker","path":"Speacr/Speaker.html","kind":"class","full_name":"Speacr::Speaker","name":"Speaker","abstract":false,"superclass":{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_BUFFER_LENGTH","name":"DEFAULT_BUFFER_LENGTH","value":"0","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/Speacr","kind":"module","full_name":"Speacr","name":"Speacr"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(say_aloud=false)-class-method","html_id":"new(say_aloud=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"say_aloud","doc":null,"default_value":"false","external_name":"say_aloud","restriction":""}],"args_string":"(say_aloud = <span class=\"n\">false</span>)","source_link":null,"source_link":null,"def":{"name":"new","args":[{"name":"say_aloud","doc":null,"default_value":"false","external_name":"say_aloud","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(say_aloud)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"say(text)-instance-method","html_id":"say(text)-instance-method","name":"say","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":""}],"args_string":"(text)","source_link":null,"source_link":null,"def":{"name":"say","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibEspeak.synth(text, text.size, 0, LibEspeak::PositionType::Character, 0, 0, pointerof(@speaker_id), nil)"}}],"macros":[],"types":[]}]}]}})